import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler as ExtMessageHandler,
    CallbackContext,
    filters,
)
from config import Config
from services.file_service import FileService
from services.wow_service import WowService
from handlers import (
    IlvlHandler,
    GpHandler,
    CustomMessageHandler,
    ReloadHandler,
    GprlHandler,
    ServerCheckHandler,
)
import asyncio

logger = logging.getLogger(__name__)


class WowBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = Config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.file_service = FileService(self.config.WOW_FILES)
        self.wow_service = WowService(self.config.WOW_COMMANDS)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        self.whitelist = self.file_service.load_whitelist(self.config.WHITELIST_FILE)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫: {len(self.whitelist)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.handlers = {
            "–∏–ª–≤–ª": IlvlHandler(self.file_service, self.wow_service, self.whitelist),
            "!–≥–ø": GpHandler(self.file_service, self.wow_service, self.whitelist),
            "!—Å–æ–æ–±—â–µ–Ω–∏–µ:": CustomMessageHandler(
                self.file_service, self.wow_service, self.whitelist
            ),
            "!—Ä–µ–ª–æ—ç–¥": ReloadHandler(
                self.file_service, self.wow_service, self.whitelist
            ),
            "!–≥–ø—Ä–ª": GprlHandler(self.wow_service, self.whitelist),
            "!—Å–µ—Ä–≤–µ—Ä": ServerCheckHandler(
                self.file_service, self.wow_service, self.whitelist
            ),
        }

    def is_user_confirmed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        return user_id in self.whitelist

    async def post_init(self, application: Application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
        application.bot_data["state"] = self

    async def _delete_message_with_retry(
        self, chat_id: int, message_id: int, context: CallbackContext = None
    ):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_attempts = 5
        initial_delay = 1
        attempt = 0

        while attempt < max_attempts:
            try:
                if context:
                    await context.bot.delete_message(
                        chat_id=chat_id, message_id=message_id
                    )
                else:
                    # –ï—Å–ª–∏ context –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Application
                    async with Application.builder().token(
                        self.config.BOT_TOKEN
                    ).build() as app:
                        await app.bot.delete_message(
                            chat_id=chat_id, message_id=message_id
                        )

                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                return True
            except Exception as e:
                attempt += 1
                if attempt == max_attempts:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}"
                    )
                    return False

                delay = initial_delay * (2 ** (attempt - 1))
                logger.warning(
                    f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫: {e}"
                )
                await asyncio.sleep(delay)

    async def _schedule_message_deletion(
        self, context: CallbackContext, chat_id: int, message_id: int, delay: int = 30
    ):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            context.job_queue.run_once(
                callback=lambda ctx: self._delete_message_with_retry(
                    chat_id, message_id, ctx
                ),
                when=delay,
                data={"chat_id": chat_id, "message_id": message_id},
                name=f"delete_msg_{message_id}",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        if self.is_user_confirmed(user.id):
            msg = await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
        else:
            msg = await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:\n"
                "1. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /confirm"
            )
        await self._schedule_message_deletion(
            context, update.effective_chat.id, msg.message_id
        )

    async def confirm(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /confirm"""
        user = update.effective_user
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å /confirm
            try:
                await update.message.delete()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            if self.is_user_confirmed(user.id):
                msg = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.",
                )
                await self._schedule_message_deletion(
                    context, update.effective_chat.id, msg.message_id
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
            chat_member = await context.bot.get_chat_member(
                self.config.GROUP_CHAT_ID, user.id
            )

            if chat_member.status in ["administrator", "creator", "member"]:
                if self.file_service.save_to_whitelist(
                    self.config.WHITELIST_FILE,
                    user.id,
                    user.username or user.first_name,
                ):
                    self.whitelist.add(user.id)
                    text = (
                        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!"
                        if chat_member.status == "member"
                        else "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"
                    )
                    msg = await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=text,
                    )
                    await self._schedule_message_deletion(
                        context, update.effective_chat.id, msg.message_id
                    )
                    return

            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã!",
            )
            await self._schedule_message_deletion(
                context, update.effective_chat.id, msg.message_id
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", exc_info=True)
            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
            await self._schedule_message_deletion(
                context, update.effective_chat.id, msg.message_id
            )

    async def _delete_warning_message(self, context: CallbackContext):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await self._delete_message_with_retry(
            context.job.data["chat_id"], context.job.data["message_id"], context
        )

    async def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        message_text = update.message.text.strip()

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.is_user_confirmed(user.id):
            try:
                await update.message.delete()
                logger.info(
                    f"–£–¥–∞–ª–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º —É–¥–∞–ª–µ–Ω–∏—è
            warning_msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"{user.first_name}, –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /confirm",
            )

            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
            try:
                context.job_queue.run_once(
                    callback=self._delete_warning_message,
                    when=30,
                    data={
                        "chat_id": chat_id,
                        "message_id": warning_msg.message_id,
                        "user_id": user.id,
                    },
                    name=f"delete_warning_{user.id}_{warning_msg.message_id}",
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return

        text = message_text.lower()

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
        if text == "–≤–æ–∂–¥—å, –ø–æ–∫–∞–∂–∏ —Å–∏—Å—å–∫–∏":
            msg = await update.message.reply_text("( . Y . )")
            await self._schedule_message_deletion(context, chat_id, msg.message_id)
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞
        parts = text.split()
        if not parts:
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
        command = parts[0]

        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥—ã
        for cmd, handler in self.handlers.items():
            if command == cmd.lower():
                await handler.handle(update, context)
                return

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        logger.info(
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}"
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            level=logging.INFO,
            handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
        )
        logging.getLogger("httpx").setLevel(logging.WARNING)

        application = (
            Application.builder()
            .token(self.config.BOT_TOKEN)
            .post_init(self.post_init)
            .build()
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("confirm", self.confirm))
        application.add_handler(
            ExtMessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
