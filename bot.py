import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler as ExtMessageHandler,
    CallbackContext,
    filters,
)
from config import Config
from services.file_service import FileService
from services.wow_service import WowService
from handlers import (
    IlvlHandler,
    GpHandler,
    CustomMessageHandler,
    ReloadHandler,
    GprlHandler,
    ServerCheckHandler,
)

logger = logging.getLogger(__name__)


class WowBot:
    def __init__(self):
        self.config = Config()
        self.file_service = FileService(self.config.WOW_FILES)
        self.wow_service = WowService(self.config.WOW_COMMANDS)
        self.whitelist = self.file_service.load_whitelist(self.config.WHITELIST_FILE)

        self.handlers = {
            "–∏–ª–≤–ª": IlvlHandler(self.file_service, self.wow_service, self.whitelist),
            "!–≥–ø": GpHandler(self.file_service, self.wow_service, self.whitelist),
            "!—Å–æ–æ–±—â–µ–Ω–∏–µ:": CustomMessageHandler(
                self.file_service, self.wow_service, self.whitelist
            ),
            "!—Ä–µ–ª–æ—ç–¥": ReloadHandler(
                self.file_service, self.wow_service, self.whitelist
            ),
            "!–≥–ø—Ä–ª": GprlHandler(self.wow_service, self.whitelist),
            "!–ø—Ä–æ–≤–µ—Ä–∫–∞_—Å–µ—Ä–≤–µ—Ä–∞": ServerCheckHandler(
                self.file_service, self.wow_service, self.whitelist
            ),
        }

    async def post_init(self, application: Application):
        application.bot_data["state"] = self

    async def start(self, update: Update, context: CallbackContext):
        user = update.effective_user
        if self.is_user_confirmed(user.id):
            await self.show_commands(update, context)
        else:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:\n"
                "1. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /confirm"
            )

    async def show_commands(self, update: Update, context: CallbackContext):
        buttons = [
            ["üìä GP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"],
            ["üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç", "üì° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"],
            ["üìà –£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤"],
        ]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

    async def handle_message(self, update: Update, context: CallbackContext):
        user = update.effective_user
        if not self.is_user_confirmed(user.id):
            await self._handle_unauthorized(update, context)
            return

        text = update.message.text.lower()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        if text == "üìä gp —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.handlers["!–≥–ø"].handle(update, context)
        elif text == "üîÑ —Ä–µ–ª–æ–∞–¥":
            await self.handlers["!—Ä–µ–ª–æ—ç–¥"].handle(update, context)
        elif text == "üì® —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: !—Å–æ–æ–±—â–µ–Ω–∏–µ: –≤–∞—à —Ç–µ–∫—Å—Ç",
                reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True),
            )
        elif text == "üì° –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä":
            await self.handlers["!–ø—Ä–æ–≤–µ—Ä–∫–∞_—Å–µ—Ä–≤–µ—Ä–∞"].handle(update, context)
        elif text == "üìà —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤":
            await self.handlers["–∏–ª–≤–ª"].handle(update, context)
        elif text == "–Ω–∞–∑–∞–¥":
            await self.show_commands(update, context)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            await self._handle_text_commands(update, context)

    async def _handle_text_commands(self, update: Update, context: CallbackContext):
        text = update.message.text.lower()
        parts = text.split()
        if not parts:
            return

        command = parts[0]
        for cmd, handler in self.handlers.items():
            if command == cmd.lower():
                await handler.handle(update, context)
                return

    async def _handle_unauthorized(self, update: Update, context: CallbackContext):
        try:
            await update.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{update.effective_user.first_name}, –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /confirm",
            reply_markup=ReplyKeyboardRemove(),
        )

    def is_user_confirmed(self, user_id: int) -> bool:
        return user_id in self.whitelist

    def run(self):
        logging.basicConfig(
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            level=logging.INFO,
            handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
        )
        logging.getLogger("httpx").setLevel(logging.WARNING)

        application = (
            Application.builder()
            .token(self.config.BOT_TOKEN)
            .post_init(self.post_init)
            .build()
        )

        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("confirm", self.confirm))
        application.add_handler(CommandHandler("commands", self.show_commands))
        application.add_handler(
            ExtMessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
        application.run_polling()
