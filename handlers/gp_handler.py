from handlers.base import BaseHandler
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
import logging

logger = logging.getLogger(__name__)


class GpHandler(BaseHandler):
    async def handle(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ì–ü —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–Ω–æ–ø–æ–∫"""
        if not await self.check_access(update):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ì–ü (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞)
        text = update.message.text
        is_button = text == "üìä –ì–ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        is_command = text.lower().startswith("!–≥–ø")

        if not (is_button or is_command):
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            args = text.split()[1:] if is_command else []

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ì–ü
            data = self.file_service.load_gp_data()
            if not data:
                await update.message.reply_text(
                    "–î–∞–Ω–Ω—ã–µ –ì–ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True),
                )
                return

            gp_data = dict(sorted(data.items(), key=lambda item: item[1]))
            result = []

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            if len(args) == 0:  # –í—Å–µ –∑–∞–ø–∏—Å–∏
                for name, value in gp_data.items():
                    result.append(f"{name}: {int(value)}")
            elif len(args) == 1:  # –ü–æ –∏–º–µ–Ω–∏
                name = args[0]
                if name in gp_data:
                    result.append(f"{name}: {int(gp_data[name])}")
                else:
                    await update.message.reply_text(
                        "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=ReplyKeyboardMarkup(
                            [["–ù–∞–∑–∞–¥"]], resize_keyboard=True
                        ),
                    )
                    return
            elif len(args) == 2:  # –ü–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
                try:
                    min_val, max_val = int(args[0]), int(args[1])
                    for name, value in gp_data.items():
                        if min_val <= int(value) <= max_val:
                            result.append(f"{name}: {int(value)}")
                except ValueError:
                    await update.message.reply_text(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª",
                        reply_markup=ReplyKeyboardMarkup(
                            [["–ù–∞–∑–∞–¥"]], resize_keyboard=True
                        ),
                    )
                    return
            else:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !–≥–ø [–∏–º—è] –∏–ª–∏ !–≥–ø [–º–∏–Ω] [–º–∞–∫—Å]",
                    reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True),
                )
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not result:
                response = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"
            else:
                response = "üìä –ì–ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join(
                    result[:50]
                )  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 50 –∑–∞–ø–∏—Å–µ–π

            await update.message.reply_text(
                response,
                reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True),
            )

        except Exception as e:
            logger.error(f"Error in GpHandler: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ì–ü",
                reply_markup=ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True),
            )
