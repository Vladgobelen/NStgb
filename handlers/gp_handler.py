from handlers.base import BaseHandler
from telegram import Update
from telegram.ext import CallbackContext
import logging

logger = logging.getLogger(__name__)

MAX_MESSAGE_LENGTH = 4000  # –õ–∏–º–∏—Ç Telegram –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ


class GpHandler(BaseHandler):
    async def _send_chunks(self, update: Update, text: str, prefix: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∞—Å—Ç—è–º–∏"""
        while text:
            chunk = text[:MAX_MESSAGE_LENGTH]
            text = text[MAX_MESSAGE_LENGTH:]

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ —á–∞–Ω–∫–µ
            last_newline = chunk.rfind("\n")
            if last_newline != -1 and len(text) > 0:
                chunk = chunk[:last_newline]
                text = chunk[last_newline + 1 :] + text

            await update.message.reply_text(prefix + chunk)
            prefix = ""  # –ü—Ä–µ—Ñ–∏–∫—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    async def handle(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '!–≥–ø'"""
        if not await self.check_access(update):
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            args = update.message.text.strip().split()[1:]

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö GP
            data = self.file_service.load_gp_data()
            if not data:
                await update.message.reply_text("–î–∞–Ω–Ω—ã–µ GP –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            gp_data = dict(sorted(data.items(), key=lambda item: item[1]))
            result = []

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            if len(args) == 0:  # –í—Å–µ –∑–∞–ø–∏—Å–∏
                for name, value in gp_data.items():
                    result.append(f"{name}: {int(value)}")

            elif len(args) == 1:  # –ü–æ –∏–º–µ–Ω–∏
                name = args[0]
                if name in gp_data:
                    result.append(f"{name}: {int(gp_data[name])}")
                else:
                    await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

            elif len(args) == 2:  # –ü–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
                try:
                    min_val, max_val = int(args[0]), int(args[1])
                    for name, value in gp_data.items():
                        if min_val <= int(value) <= max_val:
                            result.append(f"{name}: {int(value)}")
                except ValueError:
                    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
                    return

            else:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !–≥–ø [–∏–º—è] –∏–ª–∏ !–≥–ø [–º–∏–Ω] [–º–∞–∫—Å]"
                )
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not result:
                await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
            else:
                full_text = "üìä GP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join(result)
                await self._send_chunks(update, full_text)

        except Exception as e:
            logger.error(f"Error in GpHandler: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ GP")
