# handlers/history_handler.py
from handlers.base import BaseHandler
from telegram import Update
from telegram.ext import CallbackContext
import re
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

MAX_LINES = 10  # –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫ –∑–∞ —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç


class HistoryHandler(BaseHandler):
    async def handle(self, update: Update, context: CallbackContext):
        try:
            message_text = update.message.text.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å `-–∏—Å—Ç–æ—Ä–∏—è`
            if not message_text.lower().startswith("-–∏—Å—Ç–æ—Ä–∏—è"):
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            args = message_text[9:].strip().split()
            if not args:
                args = []

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            raw_lines = self.file_service.load_chat_history()
            if not raw_lines:
                await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return

            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É: "–ù–∏–∫ –°–æ–æ–±—â–µ–Ω–∏–µ timestamp"
            parsed = []
            for line in raw_lines:
                line = line.strip()
                if not line:
                    continue

                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ (timestamp)
                match = re.match(r'^(.+?)\s+(\d{10,})$', line)
                if match:
                    text_part = match.group(1).strip()
                    timestamp = int(match.group(2))

                    # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî –Ω–∏–∫
                    first_space = text_part.find(' ')
                    if first_space > 0:
                        nick = text_part[:first_space]
                        message = text_part[first_space + 1:].strip()
                    else:
                        nick = "Unknown"
                        message = text_part
                else:
                    nick = "Unknown"
                    message = line
                    timestamp = 0

                time_str = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S") if timestamp >= 1000000000 else "??:??:??"

                parsed.append({
                    "nick": nick,
                    "message": message,
                    "timestamp": timestamp,
                    "time_str": time_str
                })

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º: –Ω–∏–∫, –¥–∏–∞–ø–∞–∑–æ–Ω
            target_nick = None
            start_idx = None
            end_idx = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî —ç—Ç–æ –Ω–∏–∫
            if args:
                if not args[0].isdigit():
                    target_nick = args[0]
                    args = args[1:]

            # –î–∏–∞–ø–∞–∑–æ–Ω
            if len(args) >= 2:
                try:
                    start_idx = int(args[0]) - 1
                    end_idx = int(args[1])
                    if start_idx < 0:
                        start_idx = 0
                except ValueError:
                    await update.message.reply_text("‚ùå –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    return
            elif len(args) == 1 and args[0].isdigit():
                try:
                    end_idx = int(args[0])
                    start_idx = 0
                except ValueError:
                    pass

            # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∫—É
            if target_nick:
                filtered = [p for p in parsed if p["nick"] == target_nick]
                total_count = len(filtered)
                if total_count == 0:
                    await update.message.reply_text(f"üî∏ –ù–∏–∫ '{target_nick}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                    return
            else:
                filtered = parsed
                total_count = len(filtered)

            # –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if start_idx is None and end_idx is None:
                selected = filtered[-10:]
            elif start_idx is not None and end_idx is not None:
                selected = filtered[start_idx:end_idx]
            elif end_idx is not None:
                selected = filtered[:end_idx]
            else:
                selected = filtered[-10:]  # fallback

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            if len(selected) > MAX_LINES:
                await update.message.reply_text(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫ ({len(selected)}). –ú–∞–∫—Å–∏–º—É–º: {MAX_LINES}")
                selected = selected[:MAX_LINES]

            if not selected:
                await update.message.reply_text("üî∏ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result_lines = []
            for item in selected:
                result_lines.append(f"[{item['time_str']}] {item['nick']}: {item['message']}")

            header = "üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:"
            if target_nick:
                header += f" @{target_nick}"
            if start_idx is not None or end_idx is not None:
                range_str = f"{start_idx + 1}‚Äì{end_idx if end_idx else len(filtered)}"
                header += f" [{range_str}]"

            await update.message.reply_text(header + "\n" + "\n".join(result_lines))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ HistoryHandler: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")