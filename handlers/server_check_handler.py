from handlers.base import BaseHandler
from telegram import Update
from telegram.ext import CallbackContext
import subprocess
import logging

logger = logging.getLogger(__name__)


class ServerCheckHandler(BaseHandler):
    async def handle(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '!–ø—Ä–æ–≤–µ—Ä–∫–∞_—Å–µ—Ä–≤–µ—Ä–∞'"""
        if not await self.check_access(update):
            return

        try:
            await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            result = subprocess.run(
                "netstat | grep ':11294 ' | awk '{print $3}'",
                shell=True,
                capture_output=True,
                text=True,
            )
            connections = [int(x) for x in result.stdout.split() if x.isdigit()]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤
            result_packets = subprocess.run(
                "netstat | grep ':11294 ' | awk '{print $2}'",
                shell=True,
                capture_output=True,
                text=True,
            )
            packets = [int(x) for x in result_packets.stdout.split() if x.isdigit()]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–∞–ª–∏—á–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            result_count = subprocess.run(
                'netstat | grep "11294" | wc -l',
                shell=True,
                capture_output=True,
                text=True,
            )
            connection_count = int(result_count.stdout.strip() or 0)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n"
            report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {connection_count}\n"

            if connections:
                report += f"‚Ä¢ –ú–∞–∫—Å. —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {max(connections)}\n"
            else:
                report += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö\n"

            if packets:
                report += f"‚Ä¢ –ú–∞–∫—Å. –ø–∞–∫–µ—Ç–æ–≤: {max(packets)}\n"
            else:
                report += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–∫–µ—Ç–∞—Ö\n"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
            problems = []
            if connection_count < 1:
                problems.append("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
            if any(c > 500 for c in connections):
                problems.append("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (>500)")
            if any(p > 50000 for p in packets):
                problems.append("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ (>50000)")

            if problems:
                report += "\nüö® –ü—Ä–æ–±–ª–µ–º—ã:\n" + "\n".join(problems)
            else:
                report += "\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"

            await update.message.reply_text(report)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞")
