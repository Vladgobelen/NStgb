# services/file_service.py
import re
import logging
from pathlib import Path
from typing import Optional, Dict, Any
from slpp import slpp as lua

logger = logging.getLogger(__name__)


class FileService:
    def __init__(self, file_paths: Dict[str, Path]):
        self.file_paths = file_paths

    def find_table(self, data: str, name: str) -> Optional[str]:
        res = re.search(r"\s%s = (.*?)\n}" % name, data, re.DOTALL)
        return res.group(1) + "\n}" if res else None

    def load_lua_file(self, file_type: str) -> Optional[Dict[str, Any]]:
        file_path = self.file_paths.get(file_type)
        if not file_path or not file_path.exists():
            logger.error(f"File not found: {file_path}")
            return None

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = f.read()

            table_data = self.find_table(data, "nsDb") or self.find_table(data, "testQ")
            if not table_data:
                logger.error(f"–¢–∞–±–ª–∏—Ü–∞ nsDb/testQ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ {file_path}")
                return None

            return lua.decode(table_data)
        except Exception as e:
            logger.error(f"Error loading Lua file: {e}", exc_info=True)
            return None

    def load_gp_data(self) -> Optional[dict]:
        try:
            data = self.load_lua_file("gp")
            if not data:
                return None

            if "testQ" in data and "gpEnTg" in data["testQ"]:
                return data["testQ"]["gpEnTg"]
            elif "gpEnTg" in data:
                return data["gpEnTg"]
            elif "gpDB" in data:
                return data["gpDB"]
            elif "nsDb" in data and "gpEnTg" in data["nsDb"]:
                return data["nsDb"]["gpEnTg"]

            logger.error(f"GP –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {list(data.keys())}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GP –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            return None

    def load_whitelist(self, whitelist_path: Path) -> set[int]:
        whitelist = set()
        try:
            if whitelist_path.exists():
                with open(whitelist_path, "r", encoding="utf-8") as f:
                    for line in f:
                        if line.strip() and line.split()[0].isdigit():
                            whitelist.add(int(line.split()[0]))
            else:
                logger.warning(f"–§–∞–π–ª –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {whitelist_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ whitelist: {e}", exc_info=True)
        return whitelist

    def load_chat_history(self) -> Optional[list]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ns_chat_log['–ª–æ–≥_—á–∞—Ç']
        –¢–æ—á–µ—á–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫.
        """
        file_path = self.file_paths.get("history")
        if not file_path or not file_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = f.read()

            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ {file_path}")

            start_marker = '["–ª–æ–≥_—á–∞—Ç"] = {'
            start = data.find(start_marker)
            if start == -1:
                logger.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä ["–ª–æ–≥_—á–∞—Ç"] = {')
                return None

            # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ {
            start += len(start_marker)
            brace_count = 1
            i = start
            content_lines = []

            # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Å–∫–æ–±–æ–∫
            while i < len(data) and brace_count > 0:
                if data[i] == '{':
                    brace_count += 1
                elif data[i] == '}':
                    brace_count -= 1
                i += 1

            # –í—ã—Ä–µ–∑–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É { –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π }
            content = data[start:i-1]

            # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -- [—á–∏—Å–ª–æ]
            content = re.sub(r'--\s*\[\d+\]', '', content)

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            for line in content.splitlines():
                line = line.strip()
                if not line or line.startswith('--'):
                    continue
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç—É—é
                line = line.strip().strip(',').strip('"')
                if line:
                    content_lines.append(line)

            if not content_lines:
                logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞, –Ω–æ —Å—Ç—Ä–æ–∫ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
                return None

            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(content_lines)} —Å—Ç—Ä–æ–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
            return content_lines

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}", exc_info=True)
            return None